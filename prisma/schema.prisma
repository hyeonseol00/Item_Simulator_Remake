// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// 계정
model Accounts {
	id				Int			@id @default(autoincrement()) @map("id")
	userName		String		@map("user_name")
	loginId			String		@unique @map("login_id")
	password		String		@map("password")
	createdAt		DateTime	@default(now()) @map("created_at")
	updatedAt		DateTime	@updatedAt @map("updated_at")

	characters	Characters[]

	@@map("accounts")
}

// 캐릭터
model Characters {
	accountId		Int			@map("account_id")
	id				Int			@id @default(autoincrement()) @map("id")
	name			String		@unique @map("name")
	health			Int			@map("health")
	power			Int			@map("power")
	money			Int			@map("money")

	account 		Accounts	@relation(fields: [accountId], references: [id], onDelete: Cascade)
	inventory 		Inventory[]
	equip			Equip[]

	@@map("characters")
}

// 인벤토리
model Inventory {
	id				Int			@id @default(autoincrement())
	characterId		Int			@map("character_id")
	ownItem			Int			@map("own_item")
	count			Int			@map("count")

	character		Characters	@relation(fields: [characterId], references: [id], onDelete: Cascade)

	@@map("inventory")
}

// 장비창
model Equip {
	id				Int			@id @default(autoincrement())
	characterId		Int			@map("character_id")
	equippedItem	Int			@map("equipped_item")
	count			Int			@map("count")

	character		Characters	@relation(fields: [characterId], references: [id], onDelete: Cascade)

	@@map("equip")
}

// 아이템
model Items {
	id				Int			@id @default(autoincrement()) @map("id")
	name			String		@unique @map("name")
	statHealth		Int			@map("stat_health")
	statPower		Int			@map("stat_power")
	price			Int			@map("price")

	@@map("items")
}